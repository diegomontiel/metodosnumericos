{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0500000000000000\n"
     ]
    },
    {
     "data": {
      "image/png": ""
     },
     "execution_count": 2,
     "metadata": {
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Metodo de Euler\n",
    "# y' - e^x = 0 y(0) =1  y(5) = ?\n",
    "# dy/dx = e^x\n",
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def f(x,y):\n",
    "    return math.sin(x) + math.log(y)\n",
    "\n",
    "def euler(y0,x,h,f):\n",
    "    y = []\n",
    "    y.append(y0)\n",
    "    for i in range(1,len(x)):\n",
    "        y.append( y[i-1] + h*f(x[i-1],y[i-1]) )\n",
    "    return y\n",
    "\n",
    "n = 11\n",
    "a = 1\n",
    "b = 1.5\n",
    "h = abs(a-b)/(n-1)\n",
    "x = np.linspace(a,b,n)\n",
    "y = euler(1,x,h,f)\n",
    "print(h)\n",
    "plt.plot(x,y,'g')\n",
    "#plt.plot(x,[math.exp(xi) for xi in x],'b')\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath (stable)",
   "language": "sagemath",
   "name": "sagemath"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}