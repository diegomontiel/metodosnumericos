# Polinomio de interpolacion
import matplotlib.pyplot as plt
import numpy as np

def createMatrix(m,n,v):
    C = []
    for i in range(m):
        C.append([])
        for j in range(n):
            C[i].append(v)
    return C


x= [8,16,24,32]
y= createMatrix(4,1,0)
y[0]=[4.1]
y[1]=[4.5]
y[2]=[5.1]
y[3]=[6.1]
n=4

def getDimensiones (A):
    return(len(A))

def multMatrix(A, B):
    Am,An = getDimensiones(A)
    Bm, Bn = getDimensiones(B)
    if An != Bm:
        print("Las matrices no son conformables")
        return []
    C = createMatrix(Am,Bn,0)
    for i in range(Am):
        for j in range(Bn):
            for k in range(An):
                C[i][j] += A[i][k]*B[k][j]
    return C

def getMenorMatriz(A,r,c):

   m,n = getDimensiones(A)

   C = createMatrix(m-1,n-1,0)

   for i in range (m):

       if i == r:

           continue

       for j in range(n):

           if j == c:

               continue

           Ci = i

           if i > r:

                  Ci = i-1

           Cj = j

           if j > c:

               Cj = j-1

           C[Ci][Cj] = A[i][j]

 

   return C



def detMatriz(A):

   m,n = getDimensiones(A)

   if m != n:

       print("La matriz no es cuadrada")

       return -1

   if m == 1:

       return m

   if m == 2:

       return A[0][0]*A[1][1] - A[0][1]*A[1][0]

   det = 0

   for j in range(n):

       det += (-1)**(j)*A[0][j]*detMatriz(getMenorMatriz(A,0,j))

   return det


def getMatrizAdyacente(A):

   m,n = getDimensiones(A)

   C = createMatrix(m,n,0)

   for i in range(m):

       for j in range(n):

           C[i][j] = (-1)**(i+j)*detMatriz(getMenorMatriz(A,i,j))

   return C


def getMatrizTranspuesta(A):

   m,n = getDimensiones(A)

   C = createMatrix(n,m,0)

   for i in range(m):

       for j in range(n):

           C[j][i] = A[i][j]

   return C


def getMatrizInversa(A):

   detA = detMatriz(A)

   if detA == 0:

       print("La matriz no tiene inversa")

       return 0

   At = getMatrizTranspuesta(A)

   adyAt = getMatrizAdyacente(At)

   m,n = getDimensiones(A)

   C = createMatrix(m,n,0)

   for i in range(m):

       for j in range(n):

           C[i][j] = (1/detA)*adyAt[i][j]

   return C


A= createMatrix(n,n,0)
for i in range (n):
        for j in range(n):
            A[i][j] = x[j]**(j)
print (A)

invA = getMatrizInversa(A)
B= multMatrix(invA, y)

print(B)
#plt.plot(x,y,'ro')
#x2 = np.linspace(10,30,100)
#y2 = evalPolinomio(B,x2)
#plt.plot(x2,y2)
#plt.show()

# Polinomio de interpolacion
import matplotlib.pyplot as plt
import numpy as np

def createMatrix(m,n,v):
    C = []
    for i in range(m):
        C.append([])
        for j in range(n):
            C[i].append(v)
    return C


x1= [1,2,3,4,5]
y1= createMatrix(5,1,0)
y1[0]=[88]
y1[1]=[87]
y1[2]=[84]
y1[3]=[82]
y1[4]=[79]
n1=5

def getDimensiones (A):
    return(len(A))

def multMatrix(A, B):
    Am,An = getDimensiones(A)
    Bm, Bn = getDimensiones(B)
    if An != Bm:
        print("Las matrices no son conformables")
        return []
    C = createMatrix(Am,Bn,0)
    for i in range(Am):
        for j in range(Bn):
            for k in range(An):
                C[i][j] += A[i][k]*B[k][j]
    return C

def getMenorMatriz(A,r,c):

   m,n = getDimensiones(A)

   C = createMatrix(m-1,n-1,0)

   for i in range (m):

       if i == r:

           continue

       for j in range(n):

           if j == c:

               continue

           Ci = i

           if i > r:

                  Ci = i-1

           Cj = j

           if j > c:

               Cj = j-1

           C[Ci][Cj] = A[i][j]

 

   return C



def detMatriz(A):

   m,n = getDimensiones(A)

   if m != n:

       print("La matriz no es cuadrada")

       return -1

   if m == 1:

       return m

   if m == 2:

       return A[0][0]*A[1][1] - A[0][1]*A[1][0]

   det = 0

   for j in range(n):

       det += (-1)**(j)*A[0][j]*detMatriz(getMenorMatriz(A,0,j))

   return det


def getMatrizAdyacente(A):

   m,n = getDimensiones(A)

   C = createMatrix(m,n,0)

   for i in range(m):

       for j in range(n):

           C[i][j] = (-1)**(i+j)*detMatriz(getMenorMatriz(A,i,j))

   return C


def getMatrizTranspuesta(A):

   m,n = getDimensiones(A)

   C = createMatrix(n,m,0)

   for i in range(m):

       for j in range(n):

           C[j][i] = A[i][j]

   return C


def getMatrizInversa(A):

   detA = detMatriz(A)

   if detA == 0:

       print("La matriz no tiene inversa")

       return 0

   At = getMatrizTranspuesta(A)

   adyAt = getMatrizAdyacente(At)

   m,n = getDimensiones(A)

   C = createMatrix(m,n,0)

   for i in range(m):

       for j in range(n):

           C[i][j] = (1/detA)*adyAt[i][j]

   return C


A1= createMatrix(n1,n1,0)
for i in range (n1):
        for j in range(n):
            A1[i][j] = x1[j]**(j)
print (A1)

invA1 = getMatrizInversa(A1)
B1= multMatrix(invA1, y1)

print(B1)
#plt.plot(x,y,'ro')
#x2 = np.linspace(10,30,100)
#y2 = evalPolinomio(B,x2)
#plt.plot(x2,y2)
#plt.show()